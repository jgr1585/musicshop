plugins {
    id 'java'
    id 'io.quarkus' version '2.9.2.Final'
    id "io.swagger.core.v3.swagger-gradle-plugin" version "2.2.0"
    id 'org.hidetake.swagger.generator' version '2.19.2'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-resteasy-reactive'
    implementation 'io.quarkus:quarkus-arc'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'

    implementation project(':library')

    swaggerUI 'org.webjars:swagger-ui:4.10.3'
    implementation 'io.swagger.core.v3:swagger-integration:2.2.0'
    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.34'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.4'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.4'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.4'

    compileOnly('javax.enterprise:cdi-api:2.0.SP1')
    compileOnly('javax.ejb:javax.ejb-api:3.2.2')
    compileOnly('javax.ws.rs:javax.ws.rs-api:2.1.1')
    compileOnly('javax.servlet:javax.servlet-api:4.0.1')

    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
}

group 'at.fhv.teamd'
version '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

resolve {
    outputFileName = 'openapi'
    outputFormat = 'YAML'
    prettyPrint = 'TRUE'
    classpath = sourceSets.main.runtimeClasspath
    resourcePackages = ['at.fhv.teamd']
    outputDir = file('src/main/resources/META-INF/resources')
    alwaysResolveAppPath = 'TRUE'
}

swaggerSources {
    microservicedownload {
        code {
            inputFile = file('src/main/resources/META-INF/resources/openapi.yaml')
            language = 'javascript'
            copy {
                from 'build/swagger-code-microservicedownload/src'
                into '../spa/src/rest/microservicedownload/'
            }
        }
        ui {
            inputFile = file('src/main/resources/META-INF/resources/openapi.yaml')
            outputDir = file('src/main/resources/META-INF/resources/swagger-ui')
        }
        copy {
            from 'src/main/resources/META-INF/resources/openapi.yaml'
            into '../spa/src/rest/microservicedownload'
        }
    }
}