openapi: 3.0.1
info:
  title: Musicshop API
  contact:
    name: Musicshop API Support
    url: http://musicshop.com/contact
    email: techsupport@musicshop.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 3.0.1
servers:
- url: http://localhost:8080/backend-1.0-SNAPSHOT
  variables: {}
- url: http://10.0.40.166:8080/
  variables: {}
paths:
  /rest/article/search:
    get:
      summary: Search Articles
      description: "Search Articles by Attributes (Title, Artist)"
      operationId: searchArticlesByAttributes
      parameters:
      - name: title
        in: query
        schema:
          type: string
          default: ""
      - name: artist
        in: query
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: Articles found
        "204":
          description: No Articles found
        "400":
          description: No search params provided
  /rest/invoice/{invoiceId}/download/{albumId}:
    get:
      operationId: getInvoiceAlbumDownloadUrls
      parameters:
      - name: invoiceId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: albumId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /rest/invoice/{invoiceId}:
    get:
      operationId: getInvoiceAlbums
      parameters:
      - name: invoiceId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumDTO'
  /rest/invoice:
    get:
      operationId: getInvoices
      parameters:
      - name: customerNo
        in: query
        schema:
          type: integer
          format: int32
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceDTO'
  /rest/shoppingcart/add:
    post:
      operationId: addToShoppingCart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToShoppingCartForm'
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - Authentication: []
  /rest/shoppingcart/buy:
    post:
      operationId: buyFromShoppingCart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyFromShoppingCartForm'
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - Authentication: []
  /rest/shoppingcart/empty:
    post:
      operationId: emptyShoppingCart
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - Authentication: []
  /rest/shoppingcart/get:
    get:
      operationId: getShoppingCart
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartDTO'
      security:
      - Authentication: []
  /rest/shoppingcart/remove:
    post:
      operationId: removeFromShoppingCart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveFromShoppingCartForm'
      responses:
        default:
          description: default response
          content:
            application/json: {}
      security:
      - Authentication: []
  /rest/authentication:
    post:
      operationId: authenticateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        "200":
          description: Authentication succeeded
        "403":
          description: Wrong credentials
components:
  schemas:
    AlbumDTO:
      required:
      - artists
      - genre
      - id
      - label
      - mediums
      - musicbrainzId
      - releaseDate
      - songs
      - title
      type: object
      allOf:
      - $ref: '#/components/schemas/ArticleDTO'
      - type: object
        properties:
          mediums:
            uniqueItems: true
            type: array
            items:
              $ref: '#/components/schemas/MediumDTO'
          songs:
            uniqueItems: true
            type: array
            items:
              $ref: '#/components/schemas/SongDTO'
    ArtistDTO:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    MediumDTO:
      required:
      - id
      - price
      - stockQuantity
      - supplier
      - type
      type: object
      properties:
        id:
          type: integer
          format: int64
        price:
          type: number
        type:
          type: string
        supplier:
          $ref: '#/components/schemas/SupplierDTO'
        stockQuantity:
          type: integer
          format: int32
    SongDTO:
      required:
      - albums
      - artists
      - genre
      - id
      - label
      - length
      - musicbrainzId
      - releaseDate
      - title
      type: object
      allOf:
      - $ref: '#/components/schemas/ArticleDTO'
      - type: object
        properties:
          length:
            type: object
            properties:
              seconds:
                type: integer
                format: int64
              nano:
                type: integer
                format: int32
              negative:
                type: boolean
              zero:
                type: boolean
              units:
                type: array
                items:
                  type: object
                  properties:
                    duration:
                      type: object
                      properties:
                        seconds:
                          type: integer
                          format: int64
                        nano:
                          type: integer
                          format: int32
                        negative:
                          type: boolean
                        zero:
                          type: boolean
                    durationEstimated:
                      type: boolean
                    dateBased:
                      type: boolean
                    timeBased:
                      type: boolean
          albums:
            uniqueItems: true
            type: array
            items:
              $ref: '#/components/schemas/AlbumDTO'
    SupplierDTO:
      required:
      - id
      - name
      - supplyDuration
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        supplyDuration:
          type: object
          properties:
            seconds:
              type: integer
              format: int64
            nano:
              type: integer
              format: int32
            negative:
              type: boolean
            zero:
              type: boolean
            units:
              type: array
              items:
                type: object
                properties:
                  duration:
                    type: object
                    properties:
                      seconds:
                        type: integer
                        format: int64
                      nano:
                        type: integer
                        format: int32
                      negative:
                        type: boolean
                      zero:
                        type: boolean
                  durationEstimated:
                    type: boolean
                  dateBased:
                    type: boolean
                  timeBased:
                    type: boolean
    ArticleDTO:
      required:
      - artists
      - genre
      - id
      - label
      - musicbrainzId
      - releaseDate
      - title
      - type
      type: object
      properties:
        releaseDate:
          type: string
          format: date
        musicbrainzId:
          type: string
        title:
          type: string
        artists:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ArtistDTO'
        genre:
          type: string
        label:
          type: string
        id:
          type: integer
          format: int64
        type:
          type: string
      discriminator:
        propertyName: type
    InvoiceDTO:
      required:
      - customerNo
      - id
      - lineItems
      - totalPrice
      type: object
      properties:
        id:
          type: integer
          format: int64
        lineItems:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/LineItemDTO'
        totalPrice:
          type: number
        customerNo:
          type: integer
          format: int32
    LineItemDTO:
      required:
      - article
      - id
      - medium
      - price
      - quantity
      - quantityReturn
      - totalPrice
      type: object
      properties:
        id:
          type: integer
          format: int64
        article:
          $ref: '#/components/schemas/ArticleDTO'
        quantity:
          type: integer
          format: int32
        quantityReturn:
          type: integer
          format: int32
        price:
          type: number
        totalPrice:
          type: number
        medium:
          $ref: '#/components/schemas/MediumDTO'
    AddToShoppingCartForm:
      type: object
      properties:
        mediumId:
          type: integer
          format: int64
        amount:
          type: integer
          format: int32
    BuyFromShoppingCartForm:
      type: object
      properties:
        customerId:
          type: integer
          format: int32
    ShoppingCartDTO:
      required:
      - lineItems
      - totalAmount
      type: object
      properties:
        lineItems:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/LineItemDTO'
        totalAmount:
          type: number
    RemoveFromShoppingCartForm:
      type: object
      properties:
        mediumId:
          type: integer
          format: int64
        amount:
          type: integer
          format: int32
    Credentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
  securitySchemes:
    Authentication:
      type: http
      description: JWT token
      in: header
      scheme: bearer
      bearerFormat: JWT
