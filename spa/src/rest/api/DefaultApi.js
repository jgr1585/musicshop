/*
 * Musicshop API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.1
 * Contact: techsupport@musicshop.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AddToShoppingCartForm} from '../model/AddToShoppingCartForm';
import {AlbumDTO} from '../model/AlbumDTO';
import {BuyFromShoppingCartForm} from '../model/BuyFromShoppingCartForm';
import {Credentials} from '../model/Credentials';
import {InvoiceDTO} from '../model/InvoiceDTO';
import {RemoveFromShoppingCartForm} from '../model/RemoveFromShoppingCartForm';
import {ShoppingCartDTO} from '../model/ShoppingCartDTO';

/**
* Default service.
* @module api/DefaultApi
* @version 3.0.1
*/
export class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addToShoppingCart operation.
     * @callback moduleapi/DefaultApi~addToShoppingCartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/AddToShoppingCartForm} opts.body 
     * @param {module:api/DefaultApi~addToShoppingCartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addToShoppingCart(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/rest/shoppingcart/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the authenticateUser operation.
     * @callback moduleapi/DefaultApi~authenticateUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Credentials} opts.body 
     * @param {module:api/DefaultApi~authenticateUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authenticateUser(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/rest/authentication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the buyFromShoppingCart operation.
     * @callback moduleapi/DefaultApi~buyFromShoppingCartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/BuyFromShoppingCartForm} opts.body 
     * @param {module:api/DefaultApi~buyFromShoppingCartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    buyFromShoppingCart(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/rest/shoppingcart/buy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the emptyShoppingCart operation.
     * @callback moduleapi/DefaultApi~emptyShoppingCartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~emptyShoppingCartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    emptyShoppingCart(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/rest/shoppingcart/empty', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getInvoiceAlbumDownloadUrls operation.
     * @callback moduleapi/DefaultApi~getInvoiceAlbumDownloadUrlsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} invoiceId 
     * @param {Number} albumId 
     * @param {module:api/DefaultApi~getInvoiceAlbumDownloadUrlsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getInvoiceAlbumDownloadUrls(invoiceId, albumId, callback) {
      
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling getInvoiceAlbumDownloadUrls");
      }
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling getInvoiceAlbumDownloadUrls");
      }

      let pathParams = {
        'invoiceId': invoiceId,'albumId': albumId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];

      return this.apiClient.callApi(
        '/rest/invoice/{invoiceId}/download/{albumId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getInvoiceAlbums operation.
     * @callback moduleapi/DefaultApi~getInvoiceAlbumsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AlbumDTO>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} invoiceId 
     * @param {module:api/DefaultApi~getInvoiceAlbumsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getInvoiceAlbums(invoiceId, callback) {
      
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling getInvoiceAlbums");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AlbumDTO];

      return this.apiClient.callApi(
        '/rest/invoice/{invoiceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getInvoices operation.
     * @callback moduleapi/DefaultApi~getInvoicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvoiceDTO>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.customerNo 
     * @param {module:api/DefaultApi~getInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getInvoices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'customerNo': opts['customerNo']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InvoiceDTO];

      return this.apiClient.callApi(
        '/rest/invoice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getShoppingCart operation.
     * @callback moduleapi/DefaultApi~getShoppingCartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShoppingCartDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getShoppingCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getShoppingCart(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShoppingCartDTO;

      return this.apiClient.callApi(
        '/rest/shoppingcart/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the removeFromShoppingCart operation.
     * @callback moduleapi/DefaultApi~removeFromShoppingCartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RemoveFromShoppingCartForm} opts.body 
     * @param {module:api/DefaultApi~removeFromShoppingCartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeFromShoppingCart(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/rest/shoppingcart/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchArticlesByAttributes operation.
     * @callback moduleapi/DefaultApi~searchArticlesByAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Articles
     * Search Articles by Attributes (Title, Artist)
     * @param {Object} opts Optional parameters
     * @param {String} opts.title 
     * @param {String} opts.artist 
     * @param {module:api/DefaultApi~searchArticlesByAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchArticlesByAttributes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'title': opts['title'],'artist': opts['artist']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/rest/article/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}